--

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;	   
use work.riscv_pkg.all;

entity fetch is
  port (
  i_target	     : in  std_logic_vector(XLEN-1 downto 0);
  i_imem_read    : in  std_logic_vector(XLEN-1 downto 0);
  i_transfert    : in  std_logic;
  i_stall		 : in  std_logic;
  i_flush		 : in  std_logic;
  i_rstn		 : in  std_logic;
  i_clk    	     : in  std_logic;  
  
  o_imem_en 	 : out std_logic;
  o_imem_addr    : out std_logic_vector(XLEN-1 downto 0);	
  o_instruction  : out std_logic_vector(XLEN-1 downto 0);
  o_pc			 : out std_logic_vector(XLEN-1 downto 0)
  );
end entity fetch;

architecture beh of fetch is 

	component riscv_pc is
		port (
		i_clk		 : in  std_logic;
		i_rstn		 : in  std_logic;
		i_stall		 : in  std_logic;
		i_transfert  : in  std_logic;
		i_target 	 : in std_logic_vector(XLEN-1 downto 0); 
		o_pc 		 : out  std_logic_vector(XLEN-1 downto 0));	   
	end component riscv_pc ;
	
	
	
	begin
	o_imem_en <= '1';		
	pc: component riscv_pc
		port map(
			i_clk =>  i_clk,
			i_rstn => i_rstn, 
			i_stall => i_stall,
			i_transfert => i_transfert,
			i_target => i_target,
			o_pc => o_imem_addr
			);
	process(i_clk, i_rstn,i_flush)
	begin
	  if i_rstn='0' then
	      o_instruction <= i_imem_read;  --reset to first instruction in i_mem (done by the reset of dpm)
	  elsif rising_edge(i_clk) then
	    if i_flush = '0' then	   
			--o_pc(MEM_ADDR_WIDTH-1 downto 0) => o_imem_addr(MEM_ADDR_WIDTH-1 downto 0)
			o_pc <= o_imem_addr;
			o_instruction <= i_imem_read;
		else
			o_instruction <= x"00000013";
	    end if;		
	  end if;
	end process;	
	
end architecture beh;


--- File     riscv_fetch.vhd
---- Author   Tony Chen
---- Lab      GRM - Polytechnique Montreal
---- Date     2024-12-01
---------------------------------------------------------------------------------
---- Brief    Fetch layer in pipeline
---------------------------------------------------------------------------------
--library ieee;
--use ieee.std_logic_1164.all;
--use ieee.numeric_std.all;
--use work.riscv_pkg.all;
--
--entity fetch is
--  port (
--    i_clk         : in  std_logic;
--    i_rst         : in  std_logic;
--    i_stall       : in  std_logic;
--    i_flush       : in  std_logic;
--    i_transfert   : in  std_logic;
--    i_target      : in  std_logic_vector(XLEN-1 downto 0);
--    i_mem         : in  std_logic_vector(XLEN-1 downto 0);
--
--    o_instruction     : out std_logic_vector(XLEN-1 downto 0);
--    o_pc          : out std_logic_vector(XLEN-1 downto 0);
--    o_imem_addr   : out std_logic_vector(8 downto 0);
--    o_imem_en     : out std_logic
--    
--  );
--end entity fetch;
--
--architecture beh of fetch is
--  signal pc_value       : std_logic_vector(XLEN-1 downto 0);
--  signal pc_reg        : std_logic_vector(XLEN-1 downto 0);
--  signal pc_buffer  : std_logic_vector(XLEN-1 downto 0);
--  signal if_id_instr_reg : std_logic_vector(XLEN-1 downto 0);
--  signal mem_data_reg   : std_logic_vector(XLEN-1 downto 0);
--
--begin
--  -- PC instance
--  u_pc: entity work.riscv_pc
--    generic map (
--      RESET_VECTOR => 16#00000000#
--    )
--    port map (
--      i_clk       => i_clk,
--      i_rstn      => i_rst,
--      i_stall     => i_stall,
--      i_transfert => i_transfert,
--      i_target    => i_target,
--      o_pc        => pc_value
--    );
--
--  -- Memory interface
--  o_imem_addr <= pc_value(10 downto 2);  -- Word-aligned address
--  o_imem_en   <= '1' when i_rst = '1' else '0';
--  o_pc  <= pc_buffer;
--  o_instruction <= if_id_instr_reg;
--
--  -- Pipeline registersre
--  process(i_clk, i_rst)
--  begin
--    if i_rst = '0' then
--      
--      pc_reg <= (others => '0');
--      pc_buffer <= (others => '0');
--      if_id_instr_reg <= x"00000013";  -- NOP
--      mem_data_reg <= (others => '0');
--
--    elsif rising_edge(i_clk) then
-- 
--      mem_data_reg <= i_mem;
--      if i_flush = '1' then
--        if_id_instr_reg <= x"00000013";  -- NOP
--      elsif i_stall = '0' then
--        --pc_reg <= pc_value;
--        --pc_buffer <= pc_reg;
--	pc_buffer <= pc_value;
--        if_id_instr_reg <= mem_data_reg;
--      end if;
--    end if;
--  end process;
--
--  -- Outputs
--
--
--end architecture beh;
--library ieee;
--use ieee.std_logic_1164.all;
--use ieee.numeric_std.all;	   
--use work.riscv_pkg.all;
--
--entity fetch is
--  port (
--  i_target	     : in  std_logic_vector(XLEN-1 downto 0);
--  i_imem_read    : in  std_logic_vector(XLEN-1 downto 0);
--  i_transfert    : in  std_logic;
--  i_stall		 : in  std_logic;
--  i_flush		 : in  std_logic;
--  i_rstn		 : in  std_logic;
--  i_clk    	     : in  std_logic;  
--  
--  o_imem_en 	 : out std_logic;
--  o_imem_addr    : out std_logic_vector(XLEN-1 downto 0);	
--  o_instruction  : out std_logic_vector(XLEN-1 downto 0);
--  o_pc			 : out std_logic_vector(XLEN-1 downto 0)
--  );
--end entity fetch;
--
--architecture beh of fetch is 
--
--	component riscv_pc is
--		port (
--		i_clk		 : in  std_logic;
--		i_rstn		 : in  std_logic;
--		i_stall		 : in  std_logic;
--		i_transfert  : in  std_logic;
--		i_target 	 : in std_logic_vector(XLEN-1 downto 0); 
--		o_pc 		 : out  std_logic_vector(XLEN-1 downto 0));	   
--	end component riscv_pc ;
--	
--	
--	
--	begin
--	o_imem_en <= '1';		
--	pc: component riscv_pc
--		port map(
--			i_clk =>  i_clk,
--			i_rstn => i_rstn, 
--			i_stall => i_stall,
--			i_transfert => i_transfert,
--			i_target => i_target,
--			o_pc => o_imem_addr
--			);
--	process(i_clk, i_rstn,i_flush)
--	begin
--	  if i_rstn='0' then
--	      o_instruction <= i_imem_read;  --reset to first instruction in i_mem (done by the reset of dpm)
--	  elsif rising_edge(i_clk) then
--	    if i_flush = '0' then	   
--			--o_pc(MEM_ADDR_WIDTH-1 downto 0) => o_imem_addr(MEM_ADDR_WIDTH-1 downto 0)
--			o_pc <= o_imem_addr;
--			o_instruction <= i_imem_read;
--		else
--			o_instruction <= x"00000013";
--	    end if;		
--	  end if;
--	end process;	
--	
--end architecture beh;
--
--
----- File     riscv_fetch.vhd
------ Author   Tony Chen
------ Lab      GRM - Polytechnique Montreal
------ Date     2024-12-01
-----------------------------------------------------------------------------------
------ Brief    Fetch layer in pipeline
-----------------------------------------------------------------------------------
----library ieee;
----use ieee.std_logic_1164.all;
----use ieee.numeric_std.all;
----use work.riscv_pkg.all;
----
----entity fetch is
----  port (
----    i_clk         : in  std_logic;
----    i_rst         : in  std_logic;
----    i_stall       : in  std_logic;
----    i_flush       : in  std_logic;
----    i_transfert   : in  std_logic;
----    i_target      : in  std_logic_vector(XLEN-1 downto 0);
----    i_mem         : in  std_logic_vector(XLEN-1 downto 0);
----
----    o_instruction     : out std_logic_vector(XLEN-1 downto 0);
----    o_pc          : out std_logic_vector(XLEN-1 downto 0);
----    o_imem_addr   : out std_logic_vector(8 downto 0);
----    o_imem_en     : out std_logic
----    
----  );
----end entity fetch;
----
----architecture beh of fetch is
----  signal pc_value       : std_logic_vector(XLEN-1 downto 0);
----  signal pc_reg        : std_logic_vector(XLEN-1 downto 0);
----  signal pc_buffer  : std_logic_vector(XLEN-1 downto 0);
----  signal if_id_instr_reg : std_logic_vector(XLEN-1 downto 0);
----  signal mem_data_reg   : std_logic_vector(XLEN-1 downto 0);
----
----begin
----  -- PC instance
----  u_pc: entity work.riscv_pc
----    generic map (
----      RESET_VECTOR => 16#00000000#
----    )
----    port map (
----      i_clk       => i_clk,
----      i_rstn      => i_rst,
----      i_stall     => i_stall,
----      i_transfert => i_transfert,
----      i_target    => i_target,
----      o_pc        => pc_value
----    );
----
----  -- Memory interface
----  o_imem_addr <= pc_value(10 downto 2);  -- Word-aligned address
----  o_imem_en   <= '1' when i_rst = '1' else '0';
----  o_pc  <= pc_buffer;
----  o_instruction <= if_id_instr_reg;
----
----  -- Pipeline registersre
----  process(i_clk, i_rst)
----  begin
----    if i_rst = '0' then
----      
----      pc_reg <= (others => '0');
----      pc_buffer <= (others => '0');
----      if_id_instr_reg <= x"00000013";  -- NOP
----      mem_data_reg <= (others => '0');
----
----    elsif rising_edge(i_clk) then
---- 
----      mem_data_reg <= i_mem;
----      if i_flush = '1' then
----        if_id_instr_reg <= x"00000013";  -- NOP
----      elsif i_stall = '0' then
----        --pc_reg <= pc_value;
----        --pc_buffer <= pc_reg;
----	pc_buffer <= pc_value;
----        if_id_instr_reg <= mem_data_reg;
----      end if;
----    end if;
----  end process;
----
----  -- Outputs
----
----
----end architecture beh;