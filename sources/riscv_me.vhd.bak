		
-------------------------------------------------------------------------------
-- Library Imports
-------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.riscv_pkg.all;

-------------------------------------------------------------------------------
-- Entity Declaration
-------------------------------------------------------------------------------
entity memory_access is
  port (
    -- Clock and Reset
    i_clk         : in  std_logic;                          -- Clock signal
    i_rstn        : in  std_logic;                          -- Active-low reset

    -- Inputs
    i_store_data  : in  std_logic_vector(XLEN-1 downto 0);  -- Data to be stored in memory
    i_alu_result  : in  std_logic_vector(XLEN-1 downto 0);  -- ALU computation result
    i_rd_addr     : in  std_logic_vector(REG_WIDTH -1 downto 0);  -- Destination register address
    i_rw          : in  std_logic;                          -- Read/Write control signal
    i_wb          : in  std_logic;                          -- Write-back control signal
    i_we          : in  std_logic;                          -- Write enable signal

    -- Outputs
    o_store_data  : out std_logic_vector(XLEN-1 downto 0);  -- Data to be written to memory
    o_alu_result  : out std_logic_vector(XLEN-1 downto 0);  -- ALU result passed to the next stage
    o_wb          : out std_logic;                          -- Write-back control signal passed on
    o_we          : out std_logic;                          -- Write enable signal passed on
    o_rw          : out std_logic;                          -- Read/Write control signal passed on
    o_rd_addr     : out std_logic_vector(REG_WIDTH-1 downto 0)  -- Destination register address
  );
end entity memory_access;

-------------------------------------------------------------------------------
-- Architecture Implementation
-------------------------------------------------------------------------------
architecture beh of memory_access is
begin

  -- Process for synchronous reset and sequential logic
  process(i_clk, i_rstn)
  begin
    -- Reset condition: Active-low reset (i_rstn = '0')
    if falling_edge(i_rstn) then
      o_store_data  <= (others => '0');     -- Clear store data
      o_we          <= '0';                -- Disable write enable
      o_rw          <= '0';                -- Clear read/write signal
      o_alu_result  <= (others => '0');    -- Clear ALU result
      o_wb          <= '0';                -- Disable write-back
      o_rd_addr     <= (others => '0');    -- Clear register address

    -- Clock rising edge: Update outputs with inputs
    elsif rising_edge(i_clk) then
      o_store_data  <= i_store_data;       -- Pass input store data to output
      o_we          <= i_we;               -- Pass input write enable signal
      o_rw          <= i_rw;               -- Pass input read/write control
      o_alu_result  <= i_alu_result;       -- Pass ALU result to output
      o_wb          <= i_wb;               -- Pass write-back control signal
      o_rd_addr     <= i_rd_addr;          -- Pass destination register address
    end if;
  end process;

end architecture beh;

--library ieee;
--use ieee.std_logic_1164.all;
--use ieee.numeric_std.all;
--
--entity memory is
--port (
--        -- Inputs
--        i_clk           : in std_logic;
--        i_rstn          : in std_logic;  -- Added reset signal
--        i_store_data    : in std_logic_vector(31 downto 0);
--        i_rw            : in std_logic;
--        i_we            : in std_logic;
--        i_alu_result    : in std_logic_vector(31 downto 0);
--        i_wb            : in std_logic;
--        i_rd_addr       : in std_logic_vector(4 downto 0);
--        i_dmem_read     : in std_logic_vector(31 downto 0);  -- New input for data read from memory
--        
--        -- Outputs
--        o_rw            : out std_logic;
--        o_dmem_en       : out std_logic;
--        o_dmem_we       : out std_logic;
--        o_dmem_addr     : out std_logic_vector(8 downto 0);
--        o_dmem_write    : out std_logic_vector(31 downto 0);
--        o_load_data     : out std_logic_vector(31 downto 0);
--        o_alu_result    : out std_logic_vector(31 downto 0);
--        o_wb            : out std_logic;
--        o_rd_addr       : out std_logic_vector(4 downto 0)
--  );
--end entity memory;
--
--
--architecture Behavioral of memory is
--
----signal i_clk_buffer : std_logic;
----signal i_store_data_buffer : std_logic_vector(31 downto 0);
----signal i_rw_buffer : std_logic;
----signal i_we_buffer : std_logic; 
--signal mem_load_data_buffer: std_logic_vector(31 downto 0):= (others => '1');
--  -- Signaux internes pour connecter les composants
--  signal mem_load_data : std_logic_vector(31 downto 0);
--  signal reg_alu_result : std_logic_vector(31 downto 0);
--  signal reg_wb : std_logic;
--  signal reg_rd_addr : std_logic_vector(4 downto 0);
--
--
--begin
--  -- Instanciation du module D-MEM
--  d_mem_instance : entity work.d_mem
--    port map (
--      i_clk        => i_clk,         -- Signal d'horloge
--      i_store_data => i_store_data,  -- Données à écrire dans la mémoire
--      i_rw         => i_rw,          -- Contrôle lecture/écriture
--      i_we         => i_we,          -- Activation de l'écriture
--      i_alu_result => i_alu_result,  -- Adresse mémoire fournie par l'ALU
--      o_load_data  => mem_load_data_buffer  -- Données lues depuis la mémoire
--    );
--
--  -- Registre ME/WB pour retenir les valeurs précédentes
--  process(i_clk, i_rstn)
--  begin
--        if i_rstn = '0' then
--            o_dmem_en    <= '0';
--            o_dmem_we    <= '0';
--            o_dmem_addr  <= (others => '0');
--            o_dmem_write <= (others => '0');
--            reg_alu_result <= (others => '0');
--            reg_wb <= '0';
--            reg_rd_addr <= (others => '0');
--    elsif rising_edge(i_clk) then
--            o_dmem_en <= '1';  -- Enable data memory access
--            o_dmem_we <= i_we;  -- Write enable signal passed through
--            o_dmem_addr <= i_alu_result(10 downto 2);  -- Extract address bits (word-addressable)
--
--            if i_we = '1' then
--                o_dmem_write <= i_store_data;
--            end if;
--
--      reg_alu_result <= i_alu_result; -- Stockage du résultat ALU
--      reg_wb <= i_wb;                 -- Stockage de WB
--      reg_rd_addr <= i_rd_addr;       -- Stockage de l'adresse registre
--    end if;
--  end process;
--
--  -- Assignations des sorties via les buffers
--  o_load_data <= mem_load_data_buffer;   -- Données lues depuis la mémoire
--  o_alu_result <= reg_alu_result; -- Valeur précédente de ALU Result
--  o_wb <= reg_wb;                 -- Valeur précédente de WB
--  o_rd_addr <= reg_rd_addr;       -- Valeur précédente de l'adresse registre
--  o_rw <= i_rw;  -- Forward read/write control signal
--end architecture Behavioral;											  																									 -------------------------------------------------------------------------------
--
--library ieee;
--use ieee.std_logic_1164.all;
--use ieee.numeric_std.all;	   
--use work.riscv_pkg.all;
--
--entity memory_access is
--
--  port (
--  i_store_data  		: in  std_logic_vector(XLEN-1 downto 0);
--  i_alu_result  		: in  std_logic_vector(XLEN-1 downto 0);	 
--  i_rd_addr  			: in  std_logic_vector(REG_WIDTH -1 downto 0);  
--  i_rw 		 			: in  std_logic;		
--  i_wb 		 			: in  std_logic;
--  i_we					: in  std_logic;
--  i_rstn 	 			: in  std_logic;
--  i_clk 	 			: in  std_logic; 
--  
--  o_store_data 			: out std_logic_vector(XLEN-1 downto 0);
--  o_alu_result 			: out std_logic_vector(XLEN-1 downto 0);
--  o_wb 		 			: out std_logic;
--  o_we					: out std_logic;
--  o_rw 					: out std_logic;		
--  o_rd_addr  			: out std_logic_vector(REG_WIDTH -1 downto 0)  
--  );
--end entity memory_access;
--
--
--
--architecture beh of memory_access is 	
--	
--begin 		   
--	
--	
--		
--	process(i_clk, i_rstn)
--	begin
--	  if falling_edge(i_rstn) then
--		o_store_data <=	(others => '0');						
--		o_we <=	'0';
--		o_rw <= '0';
--		o_alu_result <= (others => '0');
--		o_wb <= '0';
--		o_rd_addr <= "00000"; 	    
--	  elsif rising_edge(i_clk) then	
--		o_store_data <=	 i_store_data;						
--		o_we		 <=	 i_we;
--		o_rw		 <=  i_rw;
--		o_alu_result  <= i_alu_result;
--		o_wb 		  <= i_wb;
--		o_rd_addr  	  <= i_rd_addr;
--	  end if;
--	end process;	
--
--	
--end architecture beh;
--
----library ieee;
----use ieee.std_logic_1164.all;
----use ieee.numeric_std.all;
----
----entity memory is
----port (
----        -- Inputs
----        i_clk           : in std_logic;
----        i_rstn          : in std_logic;  -- Added reset signal
----        i_store_data    : in std_logic_vector(31 downto 0);
----        i_rw            : in std_logic;
----        i_we            : in std_logic;
----        i_alu_result    : in std_logic_vector(31 downto 0);
----        i_wb            : in std_logic;
----        i_rd_addr       : in std_logic_vector(4 downto 0);
----        i_dmem_read     : in std_logic_vector(31 downto 0);  -- New input for data read from memory
----        
----        -- Outputs
----        o_rw            : out std_logic;
----        o_dmem_en       : out std_logic;
----        o_dmem_we       : out std_logic;
----        o_dmem_addr     : out std_logic_vector(8 downto 0);
----        o_dmem_write    : out std_logic_vector(31 downto 0);
----        o_load_data     : out std_logic_vector(31 downto 0);
----        o_alu_result    : out std_logic_vector(31 downto 0);
----        o_wb            : out std_logic;
----        o_rd_addr       : out std_logic_vector(4 downto 0)
----  );
----end entity memory;
----
----
----architecture Behavioral of memory is
----
------signal i_clk_buffer : std_logic;
------signal i_store_data_buffer : std_logic_vector(31 downto 0);
------signal i_rw_buffer : std_logic;
------signal i_we_buffer : std_logic; 
----signal mem_load_data_buffer: std_logic_vector(31 downto 0):= (others => '1');
----  -- Signaux internes pour connecter les composants
----  signal mem_load_data : std_logic_vector(31 downto 0);
----  signal reg_alu_result : std_logic_vector(31 downto 0);
----  signal reg_wb : std_logic;
----  signal reg_rd_addr : std_logic_vector(4 downto 0);
----
----
----begin
----  -- Instanciation du module D-MEM
----  d_mem_instance : entity work.d_mem
----    port map (
----      i_clk        => i_clk,         -- Signal d'horloge
----      i_store_data => i_store_data,  -- Données à écrire dans la mémoire
----      i_rw         => i_rw,          -- Contrôle lecture/écriture
----      i_we         => i_we,          -- Activation de l'écriture
----      i_alu_result => i_alu_result,  -- Adresse mémoire fournie par l'ALU
----      o_load_data  => mem_load_data_buffer  -- Données lues depuis la mémoire
----    );
----
----  -- Registre ME/WB pour retenir les valeurs précédentes
----  process(i_clk, i_rstn)
----  begin
----        if i_rstn = '0' then
----            o_dmem_en    <= '0';
----            o_dmem_we    <= '0';
----            o_dmem_addr  <= (others => '0');
----            o_dmem_write <= (others => '0');
----            reg_alu_result <= (others => '0');
----            reg_wb <= '0';
----            reg_rd_addr <= (others => '0');
----    elsif rising_edge(i_clk) then
----            o_dmem_en <= '1';  -- Enable data memory access
----            o_dmem_we <= i_we;  -- Write enable signal passed through
----            o_dmem_addr <= i_alu_result(10 downto 2);  -- Extract address bits (word-addressable)
----
----            if i_we = '1' then
----                o_dmem_write <= i_store_data;
----            end if;
----
----      reg_alu_result <= i_alu_result; -- Stockage du résultat ALU
----      reg_wb <= i_wb;                 -- Stockage de WB
----      reg_rd_addr <= i_rd_addr;       -- Stockage de l'adresse registre
----    end if;
----  end process;
----
----  -- Assignations des sorties via les buffers
----  o_load_data <= mem_load_data_buffer;   -- Données lues depuis la mémoire
----  o_alu_result <= reg_alu_result; -- Valeur précédente de ALU Result
----  o_wb <= reg_wb;                 -- Valeur précédente de WB
----  o_rd_addr <= reg_rd_addr;       -- Valeur précédente de l'adresse registre
----  o_rw <= i_rw;  -- Forward read/write control signal
----end architecture Behavioral;